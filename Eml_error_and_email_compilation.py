# The following code was generated by ChatGPT Dec 15 Version (found at https://chat.openai.com/chat)
# ChatGPT gave the following explanation of the code:
#   This code defines a function extract_info() that takes a file path and returns the relevant information 
#   from the .eml file at that path. It then iterates over the .eml files in the specified folder and calls the 
#   extract_info() function on each file. The extracted information is added to the info_dict dictionary, where 
#   the keys are the email addresses and the values are dictionaries containing the error message, subject line, 
#   and whether the email is an automatic reply.

import email
import re
import json
import os 
from os import path # MINE
from collections import Counter

# Define a function to extract the relevant information from a .eml file
def extract_info(file_path):
    with open(file_path, 'r') as fileContents:
        msg = email.message_from_file(fileContents)

        problem_addr = msg['X-Failed-Recipients']
        # If 'problem_addr' is still null, set it to the first valid email address in the 'From' field
        if problem_addr is None:
            problem_addr = re.findall(r'[\w\.-]+@[\w\.-]+', msg['From'])[0]
            
        subject = msg['Subject']
        auto_reply = msg['Auto-Submitted']
        return (problem_addr, subject, auto_reply)

# Create an empty dictionary to store the information
info_dict = {}


# Define the folder path
# folder_path = 'ThunderbirdExports-TESTING'
myDir = path.abspath(path.dirname(__file__)) # mine
targetFolder = 'ThunderbirdExports-TESTING' # mine
folder_path = path.join(myDir, targetFolder) # mine

# Iterate over the .eml files in the folder
for eml_file in os.listdir(folder_path):
    # Check if the file is a .eml file
    if eml_file.endswith('.eml'):
        # print('File Name:  ', eml_file) # DEBUGGING
        # Create the full file path
        file_path = os.path.join(folder_path, eml_file)
        # Extract the relevant information from the file
        problem_addr, subject, auto_reply = extract_info(file_path)
        # Add the extracted information to the dictionary
        # If problem_addr already exists, update it
        if problem_addr in info_dict:
            info_dict[problem_addr]['frequency'] += 1
            if subject in info_dict[problem_addr]['subjects']:
                info_dict[problem_addr]['subjects'][subject] += 1
            if auto_reply in info_dict[problem_addr]['auto_replies']:
                info_dict[problem_addr]['auto_replies'][auto_reply] += 1
        # If problem_addr doesn't already exist, add it.
        else:
            info_dict[problem_addr] = {'frequency': 0, 
                'subjects': {subject: 1}, 
                'auto_replies': {auto_reply: 1}
            }

# Convert the dictionary to JSON
json_str = json.dumps(info_dict, indent=4)

# Print the dictionary
print(json_str)